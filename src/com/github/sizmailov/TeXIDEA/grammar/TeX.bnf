{
  parserClass="com.github.sizmailov.TeXIDEA.parser.TeXParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TeX"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.sizmailov.TeXIDEA.psi"
  psiImplPackage="com.github.sizmailov.TeXIDEA.psi.impl"

  elementTypeHolderClass="com.github.sizmailov.TeXIDEA.psi.TeXTypes"
  elementTypeClass="com.github.sizmailov.TeXIDEA.psi.TeXElementType"
  tokenTypeClass="com.github.sizmailov.TeXIDEA.psi.TeXTokenType"

  tokens=[
        environment_begin_token = "\begin"
        environment_end_token = "\end"
        inline_math_dollar = "$"
        inline_math_begin_parentheses = "\("
        inline_math_end_parentheses = "\)"
        display_math_dollar = "$$"
        display_math_begin_parentheses = "\["
        display_math_end_parentheses = "\]"
        command = 'regexp:(\\([a-zA-Z@]+|\\|.))'
        word = 'regexp:[^\s\\{}%\[\]$\(\)]+'
        new_line = 'regexp:[\r\n]*'
        space = 'regexp:\s+'
        brace_left = "{"
        brace_right = "}"
        bracket_left = "["
        bracket_right = "]"
        parentheses_left = "("
        parentheses_right = ")"
        comment_begin = "%"
        escape = "\\"
        comment_context = 'regexp:%[^\r\n]*'
        environment_identifier = 'regexp:([^\${}]+)'
        brakets='regexp:([\[\]()])'
]
}


latexFile ::= context*

context ::= text_context | comment_context

text_context ::= text_content+
text_content ::= text_element+
text_element ::= text_group | word | command | environment_context | math_context | brackets

text_group ::= "{" text_element* "}"
math_group ::= "{" math_element* "}"

math_context ::= inline_math_context | display_math_context


display_math_context ::= "$$" math_content "$$" |
                         "\[" math_content "\]"

inline_math_context ::=  "$" math_content "$" |
                         "\(" math_content "\)"


math_content ::= math_element*
math_element ::= math_group | command | word | environment_context | brackets


environment_begin ::= "\begin" "{" environment_identifier "}"
environment_end ::= "\end" "{" environment_identifier "}"

environment_context ::= environment_begin environment_content* environment_end
environment_content ::= context



